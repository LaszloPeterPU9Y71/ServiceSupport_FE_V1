import { inject } from '@angular/core';
import { CanActivateFn, Router } from '@angular/router';
import { AuthStateService } from '../auth-service';

interface RoleGuardOptions {
  onlyWhenLoggedOut?: boolean;
}

/**
 * Guard, ami autentikÃ¡ciÃ³t Ã©s/vagy role-okat is ellenÅ‘riz.
 * - Ha nincs roles -> csak bejelentkezÃ©st ellenÅ‘riz.
 * - Ha van roles -> szerepkÃ¶r alapjÃ¡n enged.
 * - Ha onlyWhenLoggedOut -> csak kijelentkezett felhasznÃ¡lÃ³nak engedi.
 */
export function roleGuard(roles?: string[], options?: RoleGuardOptions): CanActivateFn {
  return () => {
    const auth = inject(AuthStateService);
    const router = inject(Router);

    const loggedIn = auth.isLoggedIn();

 /*   // â›” Csak kijelentkezett felhasznÃ¡lÃ³knak szabad ide jÃ¶nni
    if (options?.onlyWhenLoggedOut && loggedIn) {
      router.navigate(['/home']);
      alert("Be vagy jelentkezve")
      return false;
    }*/

    // â›” BejelentkezÃ©s szÃ¼ksÃ©ges
    if (!loggedIn && !options?.onlyWhenLoggedOut) {
      router.navigate(['/login']);
      return false;
    }

    // â›” SzerepkÃ¶r ellenÅ‘rzÃ©s
    if (roles && roles.length > 0) {
      const userRoles = auth.roles();
      const common = roles.filter(role => userRoles.includes(role));

      console.log('ğŸ”‘ SzÃ¼ksÃ©ges:', roles);
      console.log('ğŸ‘¤ Jelenlegi:', userRoles);
      console.log('âœ… KÃ¶zÃ¶s:', common);

      if (common.length === 0) {
        console.warn('â›” Nincs megfelelÅ‘ jogosultsÃ¡g, Ã¡tirÃ¡nyÃ­tÃ¡s kezdÅ‘oldalra-ra');
        router.navigate(['/home']);
        return false;
      }
    }

    return true;
  };
}
